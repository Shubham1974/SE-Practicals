package ass5Nonpreemptiveprioruty;
import java.util.Scanner;

public class ass5Nonpreemptiveprioruty {

	  public static void main(String[] args) {

	    System.out.println("*** Priority Scheduling (Non Preemptive) ***");

	    System.out.print("Enter Number of Process: ");
	    Scanner sc = new Scanner(System.in);
	    int n = sc.nextInt();
	    int process[] = new int[n];
	    int arrivaltime[] = new int[n];
	    int burstTime[] = new int[n];
	    int completionTime[] = new int[n];
	    int priority[] = new int[n];
	    int TAT[] = new int[n];
	    int waitingTime[] = new int[n];
	    int arrivaltimecopy[] = new int[n];
	    int burstTimecopy[] = new int[n];
	    int max = -1, min = 9999;
	    int totalTime = 0, tLap, temp;
	    int minIndex = 0, currentIndex = 0;
	    double avgWT = 0, avgTAT = 0;
	    for (int i = 0; i < n; i++) {
	      process[i] = (i + 1);
	      System.out.println("");
	      System.out.print("Enter Arrival Time for processor " + (i + 1) + ":");
	      arrivaltime[i] = sc.nextInt();
	      System.out.print("Enter Burst Time for processor " + (i + 1) + " : ");
	      burstTime[i] = sc.nextInt();
	      System.out.print("Enter Priority for " + (i + 1) + " process: ");
	      priority[i] = sc.nextInt();
	    }
	    for (int i = 0; i < n - 1; i++) {
	      for (int j = i + 1; j < n; j++) {
	        if (arrivaltime[i] > arrivaltime[j]) {
	          temp = process[i];
	          process[i] = process[j];
	          process[j] = temp;
	          temp = arrivaltime[j];
	          arrivaltime[j] = arrivaltime[i];
	          arrivaltime[i] = temp;
	          temp = priority[j];
	          priority[j] = priority[i];
	          priority[i] = temp;
	          temp = burstTime[j];
	          burstTime[j] = burstTime[i];
	          burstTime[i] = temp;
	        } else if (arrivaltime[i] == arrivaltime[j] && priority[j] > priority[i]) {
	          temp = process[i];
	          process[i] = process[j];
	          process[j] = temp;
	          temp = arrivaltime[j];
	          arrivaltime[j] = arrivaltime[i];
	          arrivaltime[i] = temp;
	          temp = priority[j];
	          priority[j] = priority[i];
	          priority[i] = temp;
	          temp = burstTime[j];
	          burstTime[j] = burstTime[i];
	          burstTime[i] = temp;
	        }
	      }
	    }
	    System.arraycopy(arrivaltime, 0, arrivaltimecopy, 0, n);
	    System.arraycopy(burstTime, 0, burstTimecopy, 0, n);

	    for (int i = 0; i < n; i++) {
	      totalTime += burstTime[i];
	      if (arrivaltime[i] < min) {
	        max = arrivaltime[i];
	      }
	    }

	    for (int i = 0; i < n; i++) {
	      if (arrivaltime[i] < min) {
	        min = arrivaltime[i];
	        minIndex = i;
	        currentIndex = i;
	      }
	    }

	    totalTime = min + totalTime;
	    tLap = min;
	    int tot = 0;
	    while (tLap < totalTime) {
	      for (int i = 0; i < n; i++) {
	        if (arrivaltimecopy[i] <= tLap) {
	          if (priority[i] < priority[minIndex]) {
	            minIndex = i;
	            currentIndex = i;
	          }
	        }
	      }
	      tLap = tLap + burstTimecopy[currentIndex];
	      completionTime[currentIndex] = tLap;
	      priority[currentIndex] = 9999;
	      for (int i = 0; i < n; i++) {
	        tot = tot + priority[i];
	      }
	    }
	    for (int i = 0; i < n; i++) {
	      TAT[i] = completionTime[i] - arrivaltime[i];
	      waitingTime[i] = TAT[i] - burstTime[i];
	      avgTAT += TAT[i];
	      avgWT += waitingTime[i];
	    }
	    System.out.println("\n*** Priority Scheduling (Non Preemptive) ***");
	    System.out.println("Processor\tArrival time\tBrust time\tCompletion Time\t\tTurn around time\tWaiting time");
	    System.out.println(
	        "----------------------------------------------------------------------------------------------------------");
	    for (int i = 0; i < n; i++) {
	      System.out.println("P" + process[i] + "\t\t" + arrivaltime[i] + "ms\t\t" + burstTime[i] + "ms\t\t"
	          + completionTime[i] + "ms\t\t\t" + TAT[i] + "ms\t\t\t" + waitingTime[i] + "ms");

	    }
	    avgWT /= n;
	    avgTAT /= n;
	    System.out.println("\nAverage Wating Time: " + avgWT);
	    System.out.println("Average Turn Around Time: " + avgTAT);
	    sc.close();

	  }
	}
/**** Shortest Job First Scheduling (Non Preemptive) ***
Enter no of process:5
 
Enter Arrival Time for processor 1:2
Enter Burst Time for processor 1: 6
 
Enter Arrival Time for processor 2:5
Enter Burst Time for processor 2: 2
 
Enter Arrival Time for processor 3:1
Enter Burst Time for processor 3: 8
 
Enter Arrival Time for processor 4:0
Enter Burst Time for processor 4: 3
 
Enter Arrival Time for processor 5:4
Enter Burst Time for processor 5: 4

*** Shortest Job First Scheduling (Non Preemptive) ***
Processor	Arrival time	Brust time	Completion Time		Turn around time	Waiting time
----------------------------------------------------------------------------------------------------------
P4		0ms		3ms		3ms			3ms			0ms
P1		2ms		6ms		9ms			7ms			1ms
P2		5ms		2ms		11ms			6ms			4ms
P5		4ms		4ms		15ms			11ms			7ms
P3		1ms		8ms		23ms			22ms			14ms

Gannat chart : p4  p1  p2  p5  p3
              0  3   9   11  15   23 
criteria = "Burst Time"
Mode = "Non preemptuve"
TAT = CT - AT
WT = TAT - BT
Average turn around time is 9.8
Average waiting time is 5.2
 * */